"""Footystats is a Tensorflow soccer match score and win/loss prediction for several European teams."""

import numpy as np  
import tensorflow as tf
from tensorflow import keras
import sqlite3

database_file = "database.sqlite"

# Define SQL query
query = """
SELECT 
    home_team.team_api_id AS home_team_api_id, 
    away_team.team_api_id AS away_team_api_id, 
    AVG(match.home_team_goal) OVER (PARTITION BY home_team.team_api_id ORDER BY match.date ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS home_team_past_goals_avg,
    AVG(match.away_team_goal) OVER (PARTITION BY away_team.team_api_id ORDER BY match.date ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS away_team_past_goals_avg,
    match.home_team_goal, 
    match.away_team_goal 
FROM 
    match 
JOIN 
    team AS home_team ON match.home_team_api_id = home_team.team_api_id
JOIN
    team AS away_team ON match.away_team_api_id = away_team.team_api_id
"""

# Load dataset
dataset = tf.data.experimental.SqlDataset("sqlite", database_file, query, 
    (tf.int32, tf.int32, tf.float64, tf.float64, tf.float64, tf.float64))

# Split dataset into features (X) and labels (y)
X = []
y = []
for home_team_api_id, away_team_api_id, home_team_past_goals, away_team_past_goals, home_team_goal, away_team_goal in dataset:
    X.append([home_team_api_id.numpy(), away_team_api_id.numpy(), home_team_past_goals.numpy(), away_team_past_goals.numpy()])
    y.append([home_team_goal.numpy(), away_team_goal.numpy()])

# Convert X and y to numpy arrays
X = np.array(X)
y = np.array(y)

# Define a simple model
model = keras.Sequential([
    keras.layers.Dense(64, activation='relu', input_shape=[4]),  # Adjust input shape to match new features
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(2)
])

# Compile the model
model.compile(loss='mean_squared_error',
    optimizer=tf.keras.optimizers.Adam(0.001))

# Train the model
model.fit(X, y, epochs=10)

# Get team names from user
# Get team names from user
print("")
home_team_name = input("Enter home team name: ")
away_team_name = input("Enter away team name: ")
print("")

# Connect to the SQLite database
conn = sqlite3.connect(database_file)

# Get home team id and past goals average
cursor = conn.execute("""
    SELECT t.team_api_id, 
           (SELECT COUNT(*) FROM match WHERE home_team_api_id = t.team_api_id) as home_matches,
           (SELECT SUM(home_team_goal) FROM match WHERE home_team_api_id = t.team_api_id) as home_goals
    FROM team t
    WHERE t.team_long_name = ?
""", (home_team_name,))
result = cursor.fetchone()
if result is None:
    print(f"No team found with name {home_team_name}")
    exit(1)
home_team_id, home_matches, home_goals = result
home_team_past_goals_avg = home_goals / home_matches if home_matches else 0

# Get away team id and past goals average
cursor = conn.execute("""
    SELECT t.team_api_id, 
           (SELECT COUNT(*) FROM match WHERE away_team_api_id = t.team_api_id) as away_matches,
           (SELECT SUM(away_team_goal) FROM match WHERE away_team_api_id = t.team_api_id) as away_goals
    FROM team t
    WHERE t.team_long_name = ?
""", (away_team_name,))
result = cursor.fetchone()
if result is None:
    print(f"No team found with name {away_team_name}")
    exit(1)
away_team_id, away_matches, away_goals = result
away_team_past_goals_avg = away_goals / away_matches if away_matches else 0
# Use the model to predict the number of goals for both teams
# Use the model to predict the number of goals for both teams
team_data = np.array([[home_team_id, away_team_id, home_team_past_goals_avg, away_team_past_goals_avg]])
predicted_goals = model.predict(team_data)

# Post-processing step to set negative predictions to zero
predicted_goals = np.maximum(predicted_goals, 0)

print("")
print("Predicted home team goals: ", predicted_goals[0][0])
print("Predicted away team goals: ", predicted_goals[0][1])
print("")
